// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "cpc_types.hpp"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// LinearSpacedArray
vec_i LinearSpacedArray(int a, int b, int N);
RcppExport SEXP _cpc_LinearSpacedArray(SEXP aSEXP, SEXP bSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(LinearSpacedArray(a, b, N));
    return rcpp_result_gen;
END_RCPP
}
// c_emgfun
vec_d c_emgfun(vec_d& x, vec_d& pars, unsigned int npeaks);
RcppExport SEXP _cpc_c_emgfun(SEXP xSEXP, SEXP parsSEXP, SEXP npeaksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type npeaks(npeaksSEXP);
    rcpp_result_gen = Rcpp::wrap(c_emgfun(x, pars, npeaks));
    return rcpp_result_gen;
END_RCPP
}
// testApexFinder
vec_i testApexFinder(vec_d v, int w);
RcppExport SEXP _cpc_testApexFinder(SEXP vSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(testApexFinder(v, w));
    return rcpp_result_gen;
END_RCPP
}
// process_chromatogram
Rcpp::List process_chromatogram(vec_d& d0, vec_d& d2, vec_d& st, double apex_thresh, int w, int p, double liftoff, double touchdown, int output, int fit_emg, int fit_only_vip, int fit_hess, double fit_rel_lim, int pts_per_peak, int min_shoulder_pts, int min_rounded_pts, const double reltol, const double abstol, const double alpha, const double gamma, const double rho, const double sigma, const int maxit, const int maxeval);
RcppExport SEXP _cpc_process_chromatogram(SEXP d0SEXP, SEXP d2SEXP, SEXP stSEXP, SEXP apex_threshSEXP, SEXP wSEXP, SEXP pSEXP, SEXP liftoffSEXP, SEXP touchdownSEXP, SEXP outputSEXP, SEXP fit_emgSEXP, SEXP fit_only_vipSEXP, SEXP fit_hessSEXP, SEXP fit_rel_limSEXP, SEXP pts_per_peakSEXP, SEXP min_shoulder_ptsSEXP, SEXP min_rounded_ptsSEXP, SEXP reltolSEXP, SEXP abstolSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP rhoSEXP, SEXP sigmaSEXP, SEXP maxitSEXP, SEXP maxevalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< vec_d& >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< vec_d& >::type st(stSEXP);
    Rcpp::traits::input_parameter< double >::type apex_thresh(apex_threshSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type liftoff(liftoffSEXP);
    Rcpp::traits::input_parameter< double >::type touchdown(touchdownSEXP);
    Rcpp::traits::input_parameter< int >::type output(outputSEXP);
    Rcpp::traits::input_parameter< int >::type fit_emg(fit_emgSEXP);
    Rcpp::traits::input_parameter< int >::type fit_only_vip(fit_only_vipSEXP);
    Rcpp::traits::input_parameter< int >::type fit_hess(fit_hessSEXP);
    Rcpp::traits::input_parameter< double >::type fit_rel_lim(fit_rel_limSEXP);
    Rcpp::traits::input_parameter< int >::type pts_per_peak(pts_per_peakSEXP);
    Rcpp::traits::input_parameter< int >::type min_shoulder_pts(min_shoulder_ptsSEXP);
    Rcpp::traits::input_parameter< int >::type min_rounded_pts(min_rounded_ptsSEXP);
    Rcpp::traits::input_parameter< const double >::type reltol(reltolSEXP);
    Rcpp::traits::input_parameter< const double >::type abstol(abstolSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const int >::type maxeval(maxevalSEXP);
    rcpp_result_gen = Rcpp::wrap(process_chromatogram(d0, d2, st, apex_thresh, w, p, liftoff, touchdown, output, fit_emg, fit_only_vip, fit_hess, fit_rel_lim, pts_per_peak, min_shoulder_pts, min_rounded_pts, reltol, abstol, alpha, gamma, rho, sigma, maxit, maxeval));
    return rcpp_result_gen;
END_RCPP
}
// test_emgfit
List test_emgfit(vec_d& x_, vec_d& y_, vec_d& wt_, vec_d& seed_, vec_d& lower_, vec_d& upper_, vec_d& stepsize_, const int npeaks_, const double alpha_, const double gamma_, const double rho_, const double sigma_, const int trace_, const int maxit_, const int maxeval_, const double reltol_, const double abstol_, const int trace2_, const int nmin_, const int restart_, const int keep_, const int scalemethod_, const double lambdascale_);
RcppExport SEXP _cpc_test_emgfit(SEXP x_SEXP, SEXP y_SEXP, SEXP wt_SEXP, SEXP seed_SEXP, SEXP lower_SEXP, SEXP upper_SEXP, SEXP stepsize_SEXP, SEXP npeaks_SEXP, SEXP alpha_SEXP, SEXP gamma_SEXP, SEXP rho_SEXP, SEXP sigma_SEXP, SEXP trace_SEXP, SEXP maxit_SEXP, SEXP maxeval_SEXP, SEXP reltol_SEXP, SEXP abstol_SEXP, SEXP trace2_SEXP, SEXP nmin_SEXP, SEXP restart_SEXP, SEXP keep_SEXP, SEXP scalemethod_SEXP, SEXP lambdascale_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< vec_d& >::type wt_(wt_SEXP);
    Rcpp::traits::input_parameter< vec_d& >::type seed_(seed_SEXP);
    Rcpp::traits::input_parameter< vec_d& >::type lower_(lower_SEXP);
    Rcpp::traits::input_parameter< vec_d& >::type upper_(upper_SEXP);
    Rcpp::traits::input_parameter< vec_d& >::type stepsize_(stepsize_SEXP);
    Rcpp::traits::input_parameter< const int >::type npeaks_(npeaks_SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_(alpha_SEXP);
    Rcpp::traits::input_parameter< const double >::type gamma_(gamma_SEXP);
    Rcpp::traits::input_parameter< const double >::type rho_(rho_SEXP);
    Rcpp::traits::input_parameter< const double >::type sigma_(sigma_SEXP);
    Rcpp::traits::input_parameter< const int >::type trace_(trace_SEXP);
    Rcpp::traits::input_parameter< const int >::type maxit_(maxit_SEXP);
    Rcpp::traits::input_parameter< const int >::type maxeval_(maxeval_SEXP);
    Rcpp::traits::input_parameter< const double >::type reltol_(reltol_SEXP);
    Rcpp::traits::input_parameter< const double >::type abstol_(abstol_SEXP);
    Rcpp::traits::input_parameter< const int >::type trace2_(trace2_SEXP);
    Rcpp::traits::input_parameter< const int >::type nmin_(nmin_SEXP);
    Rcpp::traits::input_parameter< const int >::type restart_(restart_SEXP);
    Rcpp::traits::input_parameter< const int >::type keep_(keep_SEXP);
    Rcpp::traits::input_parameter< const int >::type scalemethod_(scalemethod_SEXP);
    Rcpp::traits::input_parameter< const double >::type lambdascale_(lambdascale_SEXP);
    rcpp_result_gen = Rcpp::wrap(test_emgfit(x_, y_, wt_, seed_, lower_, upper_, stepsize_, npeaks_, alpha_, gamma_, rho_, sigma_, trace_, maxit_, maxeval_, reltol_, abstol_, trace2_, nmin_, restart_, keep_, scalemethod_, lambdascale_));
    return rcpp_result_gen;
END_RCPP
}
// getEIC_min
vec_d getEIC_min(vec_d& mz, vec_d& intensity, vec_i& scan_idx, vec_d& mz_range, vec_i& scan_range);
RcppExport SEXP _cpc_getEIC_min(SEXP mzSEXP, SEXP intensitySEXP, SEXP scan_idxSEXP, SEXP mz_rangeSEXP, SEXP scan_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type mz(mzSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type intensity(intensitySEXP);
    Rcpp::traits::input_parameter< vec_i& >::type scan_idx(scan_idxSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type mz_range(mz_rangeSEXP);
    Rcpp::traits::input_parameter< vec_i& >::type scan_range(scan_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(getEIC_min(mz, intensity, scan_idx, mz_range, scan_range));
    return rcpp_result_gen;
END_RCPP
}
// getEIC_Rcpp
NumericVector getEIC_Rcpp(NumericVector& mz, NumericVector& intensity, IntegerVector& scan_idx, NumericVector& mz_range, IntegerVector& scan_range);
RcppExport SEXP _cpc_getEIC_Rcpp(SEXP mzSEXP, SEXP intensitySEXP, SEXP scan_idxSEXP, SEXP mz_rangeSEXP, SEXP scan_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type mz(mzSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type intensity(intensitySEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type scan_idx(scan_idxSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mz_range(mz_rangeSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type scan_range(scan_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(getEIC_Rcpp(mz, intensity, scan_idx, mz_range, scan_range));
    return rcpp_result_gen;
END_RCPP
}
// c_combine_spectra
NumericVector c_combine_spectra(NumericVector& mz, NumericVector& intensity, IntegerVector& scan_idx, IntegerVector& scan_range, NumericVector& mz_bins);
RcppExport SEXP _cpc_c_combine_spectra(SEXP mzSEXP, SEXP intensitySEXP, SEXP scan_idxSEXP, SEXP scan_rangeSEXP, SEXP mz_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type mz(mzSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type intensity(intensitySEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type scan_idx(scan_idxSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type scan_range(scan_rangeSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mz_bins(mz_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_combine_spectra(mz, intensity, scan_idx, scan_range, mz_bins));
    return rcpp_result_gen;
END_RCPP
}
// fast_match
vec_i fast_match(vec_i& v1, vec_i& v2);
RcppExport SEXP _cpc_fast_match(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_i& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< vec_i& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(fast_match(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// match_to_range
vec_i match_to_range(vec_d& v, vec_d& vmin, vec_d& vmax);
RcppExport SEXP _cpc_match_to_range(SEXP vSEXP, SEXP vminSEXP, SEXP vmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type vmin(vminSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type vmax(vmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(match_to_range(v, vmin, vmax));
    return rcpp_result_gen;
END_RCPP
}
// skim_to_val
int skim_to_val(vec_d& v, double val, int start_at, int break_at, int direction);
RcppExport SEXP _cpc_skim_to_val(SEXP vSEXP, SEXP valSEXP, SEXP start_atSEXP, SEXP break_atSEXP, SEXP directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    Rcpp::traits::input_parameter< int >::type start_at(start_atSEXP);
    Rcpp::traits::input_parameter< int >::type break_at(break_atSEXP);
    Rcpp::traits::input_parameter< int >::type direction(directionSEXP);
    rcpp_result_gen = Rcpp::wrap(skim_to_val(v, val, start_at, break_at, direction));
    return rcpp_result_gen;
END_RCPP
}
// c_integrate_vector
double c_integrate_vector(vec_d& x, vec_d& y, int a, int b);
RcppExport SEXP _cpc_c_integrate_vector(SEXP xSEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_integrate_vector(x, y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// c_run_mean
vec_d c_run_mean(vec_d& x, int b);
RcppExport SEXP _cpc_c_run_mean(SEXP xSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_run_mean(x, b));
    return rcpp_result_gen;
END_RCPP
}
// c_lm_fit
vec_d c_lm_fit(vec_d& x, vec_d& y, int a, int b);
RcppExport SEXP _cpc_c_lm_fit(SEXP xSEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_lm_fit(x, y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// c_lm_slope
double c_lm_slope(vec_d& x, vec_d& y, int a, int b);
RcppExport SEXP _cpc_c_lm_slope(SEXP xSEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_lm_slope(x, y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// vector_residual
vec_d vector_residual(NumericVector& x, NumericVector& y);
RcppExport SEXP _cpc_vector_residual(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vector_residual(x, y));
    return rcpp_result_gen;
END_RCPP
}
// c_local_extremes2
vec_i c_local_extremes2(vec_d& v, int w);
RcppExport SEXP _cpc_c_local_extremes2(SEXP vSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_local_extremes2(v, w));
    return rcpp_result_gen;
END_RCPP
}
// c_local_extremes
vec_i c_local_extremes(vec_d& v, int w);
RcppExport SEXP _cpc_c_local_extremes(SEXP vSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_local_extremes(v, w));
    return rcpp_result_gen;
END_RCPP
}
// c_peak_to_peak_noise
double c_peak_to_peak_noise(vec_i& x, vec_d& y, int w);
RcppExport SEXP _cpc_c_peak_to_peak_noise(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_i& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_peak_to_peak_noise(x, y, w));
    return rcpp_result_gen;
END_RCPP
}
// c_running_slope
vec_d c_running_slope(vec_d& x, vec_d& y, int w);
RcppExport SEXP _cpc_c_running_slope(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_running_slope(x, y, w));
    return rcpp_result_gen;
END_RCPP
}
// c_local_max
vec_i c_local_max(vec_d& v, int w);
RcppExport SEXP _cpc_c_local_max(SEXP vSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_local_max(v, w));
    return rcpp_result_gen;
END_RCPP
}
// c_local_min
vec_i c_local_min(vec_d& v, int w);
RcppExport SEXP _cpc_c_local_min(SEXP vSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_local_min(v, w));
    return rcpp_result_gen;
END_RCPP
}
// c_get_inflection_points
vec_i c_get_inflection_points(vec_d& x, int b);
RcppExport SEXP _cpc_c_get_inflection_points(SEXP xSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_get_inflection_points(x, b));
    return rcpp_result_gen;
END_RCPP
}
// c_get_directional_inflection_points
vec_i c_get_directional_inflection_points(std::vector<double>& x, int b);
RcppExport SEXP _cpc_c_get_directional_inflection_points(SEXP xSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_get_directional_inflection_points(x, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cpc_LinearSpacedArray", (DL_FUNC) &_cpc_LinearSpacedArray, 3},
    {"_cpc_c_emgfun", (DL_FUNC) &_cpc_c_emgfun, 3},
    {"_cpc_testApexFinder", (DL_FUNC) &_cpc_testApexFinder, 2},
    {"_cpc_process_chromatogram", (DL_FUNC) &_cpc_process_chromatogram, 24},
    {"_cpc_test_emgfit", (DL_FUNC) &_cpc_test_emgfit, 23},
    {"_cpc_getEIC_min", (DL_FUNC) &_cpc_getEIC_min, 5},
    {"_cpc_getEIC_Rcpp", (DL_FUNC) &_cpc_getEIC_Rcpp, 5},
    {"_cpc_c_combine_spectra", (DL_FUNC) &_cpc_c_combine_spectra, 5},
    {"_cpc_fast_match", (DL_FUNC) &_cpc_fast_match, 2},
    {"_cpc_match_to_range", (DL_FUNC) &_cpc_match_to_range, 3},
    {"_cpc_skim_to_val", (DL_FUNC) &_cpc_skim_to_val, 5},
    {"_cpc_c_integrate_vector", (DL_FUNC) &_cpc_c_integrate_vector, 4},
    {"_cpc_c_run_mean", (DL_FUNC) &_cpc_c_run_mean, 2},
    {"_cpc_c_lm_fit", (DL_FUNC) &_cpc_c_lm_fit, 4},
    {"_cpc_c_lm_slope", (DL_FUNC) &_cpc_c_lm_slope, 4},
    {"_cpc_vector_residual", (DL_FUNC) &_cpc_vector_residual, 2},
    {"_cpc_c_local_extremes2", (DL_FUNC) &_cpc_c_local_extremes2, 2},
    {"_cpc_c_local_extremes", (DL_FUNC) &_cpc_c_local_extremes, 2},
    {"_cpc_c_peak_to_peak_noise", (DL_FUNC) &_cpc_c_peak_to_peak_noise, 3},
    {"_cpc_c_running_slope", (DL_FUNC) &_cpc_c_running_slope, 3},
    {"_cpc_c_local_max", (DL_FUNC) &_cpc_c_local_max, 2},
    {"_cpc_c_local_min", (DL_FUNC) &_cpc_c_local_min, 2},
    {"_cpc_c_get_inflection_points", (DL_FUNC) &_cpc_c_get_inflection_points, 2},
    {"_cpc_c_get_directional_inflection_points", (DL_FUNC) &_cpc_c_get_directional_inflection_points, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cpc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
