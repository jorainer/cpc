// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "cpc_types.hpp"
#include <Rcpp.h>

using namespace Rcpp;

// process_chromatogram
Rcpp::List process_chromatogram(vec_d& d0, vec_d& d1, vec_d& d2, double apex_thresh, int w, int p, double liftoff, double touchdown, int output);
RcppExport SEXP _cpc_process_chromatogram(SEXP d0SEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP apex_threshSEXP, SEXP wSEXP, SEXP pSEXP, SEXP liftoffSEXP, SEXP touchdownSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type d0(d0SEXP);
    Rcpp::traits::input_parameter< vec_d& >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< vec_d& >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< double >::type apex_thresh(apex_threshSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type liftoff(liftoffSEXP);
    Rcpp::traits::input_parameter< double >::type touchdown(touchdownSEXP);
    Rcpp::traits::input_parameter< int >::type output(outputSEXP);
    rcpp_result_gen = Rcpp::wrap(process_chromatogram(d0, d1, d2, apex_thresh, w, p, liftoff, touchdown, output));
    return rcpp_result_gen;
END_RCPP
}
// getEIC_min
vec_d getEIC_min(vec_d& mz, vec_d& intensity, vec_i& scan_idx, vec_d& mz_range, vec_i& scan_range);
RcppExport SEXP _cpc_getEIC_min(SEXP mzSEXP, SEXP intensitySEXP, SEXP scan_idxSEXP, SEXP mz_rangeSEXP, SEXP scan_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type mz(mzSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type intensity(intensitySEXP);
    Rcpp::traits::input_parameter< vec_i& >::type scan_idx(scan_idxSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type mz_range(mz_rangeSEXP);
    Rcpp::traits::input_parameter< vec_i& >::type scan_range(scan_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(getEIC_min(mz, intensity, scan_idx, mz_range, scan_range));
    return rcpp_result_gen;
END_RCPP
}
// getEIC_Rcpp
NumericVector getEIC_Rcpp(NumericVector& mz, NumericVector& intensity, IntegerVector& scan_idx, NumericVector& mz_range, IntegerVector& scan_range);
RcppExport SEXP _cpc_getEIC_Rcpp(SEXP mzSEXP, SEXP intensitySEXP, SEXP scan_idxSEXP, SEXP mz_rangeSEXP, SEXP scan_rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type mz(mzSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type intensity(intensitySEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type scan_idx(scan_idxSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mz_range(mz_rangeSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type scan_range(scan_rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(getEIC_Rcpp(mz, intensity, scan_idx, mz_range, scan_range));
    return rcpp_result_gen;
END_RCPP
}
// c_demg
vec_d c_demg(int xf, int xl, double u, double s, double l);
RcppExport SEXP _cpc_c_demg(SEXP xfSEXP, SEXP xlSEXP, SEXP uSEXP, SEXP sSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type xf(xfSEXP);
    Rcpp::traits::input_parameter< int >::type xl(xlSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(c_demg(xf, xl, u, s, l));
    return rcpp_result_gen;
END_RCPP
}
// c_demg_2
vec_d c_demg_2(vec_d x, double u, double s, double l);
RcppExport SEXP _cpc_c_demg_2(SEXP xSEXP, SEXP uSEXP, SEXP sSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(c_demg_2(x, u, s, l));
    return rcpp_result_gen;
END_RCPP
}
// c_cemgsmat
NumericMatrix c_cemgsmat(NumericMatrix parsm, vec_d x);
RcppExport SEXP _cpc_c_cemgsmat(SEXP parsmSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type parsm(parsmSEXP);
    Rcpp::traits::input_parameter< vec_d >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cemgsmat(parsm, x));
    return rcpp_result_gen;
END_RCPP
}
// c_minfunc
double c_minfunc(vec_d pars, vec_d x, vec_d y, vec_d w, int n);
RcppExport SEXP _cpc_c_minfunc(SEXP parsSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< vec_d >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d >::type y(ySEXP);
    Rcpp::traits::input_parameter< vec_d >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(c_minfunc(pars, x, y, w, n));
    return rcpp_result_gen;
END_RCPP
}
// c_minfunc_2
double c_minfunc_2(vec_d pars, vec_d x, vec_d y, vec_d w, int n);
RcppExport SEXP _cpc_c_minfunc_2(SEXP parsSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< vec_d >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d >::type y(ySEXP);
    Rcpp::traits::input_parameter< vec_d >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(c_minfunc_2(pars, x, y, w, n));
    return rcpp_result_gen;
END_RCPP
}
// c_mingrad
vec_d c_mingrad(vec_d pars, vec_d x, vec_d y, vec_d w, int n, double h);
RcppExport SEXP _cpc_c_mingrad(SEXP parsSEXP, SEXP xSEXP, SEXP ySEXP, SEXP wSEXP, SEXP nSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< vec_d >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d >::type y(ySEXP);
    Rcpp::traits::input_parameter< vec_d >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(c_mingrad(pars, x, y, w, n, h));
    return rcpp_result_gen;
END_RCPP
}
// fast_match
vec_i fast_match(vec_i& v1, vec_i& v2);
RcppExport SEXP _cpc_fast_match(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_i& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< vec_i& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(fast_match(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// match_to_range
vec_i match_to_range(vec_d& v, vec_d& vmin, vec_d& vmax);
RcppExport SEXP _cpc_match_to_range(SEXP vSEXP, SEXP vminSEXP, SEXP vmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type vmin(vminSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type vmax(vmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(match_to_range(v, vmin, vmax));
    return rcpp_result_gen;
END_RCPP
}
// skim_to_val
int skim_to_val(vec_d& v, double val, int start_at, int break_at, int direction);
RcppExport SEXP _cpc_skim_to_val(SEXP vSEXP, SEXP valSEXP, SEXP start_atSEXP, SEXP break_atSEXP, SEXP directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    Rcpp::traits::input_parameter< int >::type start_at(start_atSEXP);
    Rcpp::traits::input_parameter< int >::type break_at(break_atSEXP);
    Rcpp::traits::input_parameter< int >::type direction(directionSEXP);
    rcpp_result_gen = Rcpp::wrap(skim_to_val(v, val, start_at, break_at, direction));
    return rcpp_result_gen;
END_RCPP
}
// c_integrate_vector
double c_integrate_vector(vec_d& x, vec_d& y, int a, int b);
RcppExport SEXP _cpc_c_integrate_vector(SEXP xSEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_integrate_vector(x, y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// c_run_mean
vec_d c_run_mean(vec_d& x, int b);
RcppExport SEXP _cpc_c_run_mean(SEXP xSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_run_mean(x, b));
    return rcpp_result_gen;
END_RCPP
}
// c_lm_fit
vec_d c_lm_fit(vec_d& x, vec_d& y, int a, int b);
RcppExport SEXP _cpc_c_lm_fit(SEXP xSEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_lm_fit(x, y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// c_lm_slope
double c_lm_slope(vec_d& x, vec_d& y, int a, int b);
RcppExport SEXP _cpc_c_lm_slope(SEXP xSEXP, SEXP ySEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_lm_slope(x, y, a, b));
    return rcpp_result_gen;
END_RCPP
}
// vector_residual
vec_d vector_residual(NumericVector& x, NumericVector& y);
RcppExport SEXP _cpc_vector_residual(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(vector_residual(x, y));
    return rcpp_result_gen;
END_RCPP
}
// c_local_extremes2
vec_i c_local_extremes2(vec_d& v, int w);
RcppExport SEXP _cpc_c_local_extremes2(SEXP vSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_local_extremes2(v, w));
    return rcpp_result_gen;
END_RCPP
}
// c_local_extremes
vec_i c_local_extremes(vec_d& v, int w);
RcppExport SEXP _cpc_c_local_extremes(SEXP vSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_local_extremes(v, w));
    return rcpp_result_gen;
END_RCPP
}
// c_peak_to_peak_noise
double c_peak_to_peak_noise(vec_i& x, vec_d& y, int w);
RcppExport SEXP _cpc_c_peak_to_peak_noise(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_i& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_peak_to_peak_noise(x, y, w));
    return rcpp_result_gen;
END_RCPP
}
// c_running_slope
vec_d c_running_slope(vec_d& x, vec_d& y, int w);
RcppExport SEXP _cpc_c_running_slope(SEXP xSEXP, SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_d& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_running_slope(x, y, w));
    return rcpp_result_gen;
END_RCPP
}
// c_local_max
vec_i c_local_max(vec_d& v, int w);
RcppExport SEXP _cpc_c_local_max(SEXP vSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_local_max(v, w));
    return rcpp_result_gen;
END_RCPP
}
// c_local_min
vec_i c_local_min(vec_d& v, int w);
RcppExport SEXP _cpc_c_local_min(SEXP vSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(c_local_min(v, w));
    return rcpp_result_gen;
END_RCPP
}
// c_get_inflection_points
vec_i c_get_inflection_points(vec_d& x, int b);
RcppExport SEXP _cpc_c_get_inflection_points(SEXP xSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec_d& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_get_inflection_points(x, b));
    return rcpp_result_gen;
END_RCPP
}
// c_get_directional_inflection_points
vec_i c_get_directional_inflection_points(std::vector<double>& x, int b);
RcppExport SEXP _cpc_c_get_directional_inflection_points(SEXP xSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(c_get_directional_inflection_points(x, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cpc_process_chromatogram", (DL_FUNC) &_cpc_process_chromatogram, 9},
    {"_cpc_getEIC_min", (DL_FUNC) &_cpc_getEIC_min, 5},
    {"_cpc_getEIC_Rcpp", (DL_FUNC) &_cpc_getEIC_Rcpp, 5},
    {"_cpc_c_demg", (DL_FUNC) &_cpc_c_demg, 5},
    {"_cpc_c_demg_2", (DL_FUNC) &_cpc_c_demg_2, 4},
    {"_cpc_c_cemgsmat", (DL_FUNC) &_cpc_c_cemgsmat, 2},
    {"_cpc_c_minfunc", (DL_FUNC) &_cpc_c_minfunc, 5},
    {"_cpc_c_minfunc_2", (DL_FUNC) &_cpc_c_minfunc_2, 5},
    {"_cpc_c_mingrad", (DL_FUNC) &_cpc_c_mingrad, 6},
    {"_cpc_fast_match", (DL_FUNC) &_cpc_fast_match, 2},
    {"_cpc_match_to_range", (DL_FUNC) &_cpc_match_to_range, 3},
    {"_cpc_skim_to_val", (DL_FUNC) &_cpc_skim_to_val, 5},
    {"_cpc_c_integrate_vector", (DL_FUNC) &_cpc_c_integrate_vector, 4},
    {"_cpc_c_run_mean", (DL_FUNC) &_cpc_c_run_mean, 2},
    {"_cpc_c_lm_fit", (DL_FUNC) &_cpc_c_lm_fit, 4},
    {"_cpc_c_lm_slope", (DL_FUNC) &_cpc_c_lm_slope, 4},
    {"_cpc_vector_residual", (DL_FUNC) &_cpc_vector_residual, 2},
    {"_cpc_c_local_extremes2", (DL_FUNC) &_cpc_c_local_extremes2, 2},
    {"_cpc_c_local_extremes", (DL_FUNC) &_cpc_c_local_extremes, 2},
    {"_cpc_c_peak_to_peak_noise", (DL_FUNC) &_cpc_c_peak_to_peak_noise, 3},
    {"_cpc_c_running_slope", (DL_FUNC) &_cpc_c_running_slope, 3},
    {"_cpc_c_local_max", (DL_FUNC) &_cpc_c_local_max, 2},
    {"_cpc_c_local_min", (DL_FUNC) &_cpc_c_local_min, 2},
    {"_cpc_c_get_inflection_points", (DL_FUNC) &_cpc_c_get_inflection_points, 2},
    {"_cpc_c_get_directional_inflection_points", (DL_FUNC) &_cpc_c_get_directional_inflection_points, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cpc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
