% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes.R
\docType{methods}
\name{getProcParams,cpc_chrom-method}
\alias{getProcParams,cpc_chrom-method}
\alias{setProcParams<-,cpc_chrom-method}
\alias{getProcData,cpc_chrom-method}
\alias{setProcData<-,cpc_chrom-method}
\alias{getMzRange,cpc_chrom-method}
\alias{getResults,cpc_chrom-method}
\alias{setResults<-,cpc_chrom-method}
\alias{setXIC<-,cpc_chrom-method}
\alias{plotPeak,cpc_chrom-method}
\alias{calculatePeakCharacteristics,cpc_chrom-method}
\alias{smoothChromatogram,cpc_chrom-method}
\alias{processChromatogram,cpc_chrom-method}
\title{Getter method for the procParams slot}
\usage{
\S4method{getProcParams}{cpc_chrom}(x, value = NULL)

\S4method{setProcParams}{cpc_chrom}(x) <- value

\S4method{getProcData}{cpc_chrom}(x, value = NULL)

\S4method{setProcData}{cpc_chrom}(x) <- value

\S4method{getMzRange}{cpc_chrom}(x)

\S4method{getResults}{cpc_chrom}(x)

\S4method{setResults}{cpc_chrom}(x) <- value

\S4method{setXIC}{cpc_chrom}(x) <- value

\S4method{plotPeak}{cpc_chrom}(x, plotEMG = T, plotXCMS = T, annotation = character(1))

\S4method{calculatePeakCharacteristics}{cpc_chrom}(x)

\S4method{smoothChromatogram}{cpc_chrom}(x)

\S4method{processChromatogram}{cpc_chrom}(x)
}
\arguments{
\item{x}{A \code{cpc_chrom} object.}

\item{value}{A \code{numeric} vector.}
}
\value{
A named \code{list} of process parameters.

A \code{cpc_chrom} object

A named \code{list} with process data.

A \code{cpc_chrom} object

A \code{numeric} vector with mz range.

A \code{data.frame} with the results from the peak processing.

A \code{cpc_chrom} object.

A \code{cpc_chrom} object

cpc_chrom object

A \code{cpc_chrom} object.

A \code{cpc_chrom} object.
}
\description{
Takes a named \code{list} of parameters as argument. If a parameter name 
already exists, it is updated with the new value and if it does not already
exist, it is added.

Takes a named \code{list} with data as argument. If a data name 
already exists, it is updated with the new value and if it does not already
exist, it is added.

This method will plot the processing result as a panel for review.

This is an internal function for calculating the peak characteristics based 
on the processing results.

This method will perform the processing of a chromatogram on a \code{cpc_chrom}
object. This method is called repeatedly by \code{characterize_xcms_peaklist}.
}
\details{
#### Method: fitEMG ####

#' @title Method EMG deconvolution of a chromatogram
#' 
#' @description 
#' 
#' Internal method for fitting a series of EMG functions to the chromatogram for
#' deconvolution of the peak shapes.
#' 
#' @param x A \code{cpc_chrom} object
#' 
#' @return A \code{cpc_chrom} object
#' 
#' @export
#' @docType methods
#' @rdname cpc_chrom-methods
setMethod("fitEMG", signature("cpc_chrom"), function(x)
{
    # select peaks to use in the fitting
    # to test: just use the VIP and the closest peaks before and after
    sel <- x@rawProcResults$current_peak+1
    
    if (x@rawProcResults$front_code[x@rawProcResults$current_peak+1] != 0)
    {
        sel <- c(x@rawProcResults$current_peak, sel)
    }
    
    if (x@rawProcResults$tail_code[x@rawProcResults$current_peak+1] != 0)
    {
        sel <- c(sel, x@rawProcResults$current_peak+2)
    }
    
    # calculate sigma for selected peaks
    sel_sigma <- (x@rawProcResults$tail_inf[sel] - x@rawProcResults$front_inf[sel])/2
    
    # determine points to fit: front bound of first peak -> tail bound of last peak
    sel_bound_full <- c(x@rawProcResults$front_peak_bound[sel[1]]+1,
                        x@rawProcResults$tail_peak_bound[sel[length(sel)]]+1)
    
    sel_bound_vip <- c(x@rawProcResults$front_peak_bound[x@rawProcResults$current_peak+1]+1,
                       x@rawProcResults$tail_peak_bound[x@rawProcResults$current_peak+1]+1)
    
    # use only front inf, 3p around apex and tail inf of each selected peak
    sel1_idx <- sort(unique(c(x@rawProcResults$front_inf[sel]+1,
                              x@rawProcResults$adj_apex[sel],
                              x@rawProcResults$adj_apex[sel]+1,
                              x@rawProcResults$adj_apex[sel]+2,
                              x@rawProcResults$tail_inf[sel]+1)))
    
    # fit peaks
    (bfgs_full_xic <- fitemgs_bfgs(signal = x@xic[sel_bound_full[1]:sel_bound_full[2]], 
                                  scantime = sel_bound_full[1]:sel_bound_full[2], 
                                  seed = list(mu = x@rawProcResults$adj_apex[sel],
                                              sigma = sel_sigma,
                                              lambda = rep(10, length(sel))),
                                  upper = list(mu = x@rawProcResults$adj_apex[sel]-5,
                                               sigma = sel_sigma*.75,
                                               lambda = rep(1, length(sel))*.9),
                                  lower = list(mu = x@rawProcResults$adj_apex[sel]+5,
                                               sigma = sel_sigma*1.25,
                                               lambda = rep(30, length(sel))*1.1),
                                  plot.fit = T))
    (bfgs_vip_xic <- fitemgs_bfgs(signal = x@xic[sel_bound_vip[1]:sel_bound_vip[2]], 
                                 scantime = sel_bound_vip[1]:sel_bound_vip[2], 
                                 seed = list(mu = x@rawProcResults$adj_apex[sel],
                                             sigma = sel_sigma,
                                             lambda = rep(10, length(sel))),
                                 lower = list(mu = x@rawProcResults$adj_apex[sel]-5,
                                              sigma = sel_sigma*.75,
                                              lambda = rep(1, length(sel))*.9),
                                 upper = list(mu = x@rawProcResults$adj_apex[sel]+5,
                                              sigma = sel_sigma*1.25,
                                              lambda = rep(30, length(sel))*1.1),
                                 plot.fit = T))
    (bfgs_sel1_xic <- fitemgs_bfgs(signal = x@xic[sel1_idx], 
                                  scantime = sel1_idx, 
                                  seed = list(mu = x@rawProcResults$adj_apex[sel],
                                              sigma = sel_sigma,
                                              lambda = rep(10, length(sel))),
                                  upper = list(mu = x@rawProcResults$adj_apex[sel]-5,
                                               sigma = sel_sigma*.75,
                                               lambda = rep(1, length(sel))*.9),
                                  lower = list(mu = x@rawProcResults$adj_apex[sel]+5,
                                               sigma = sel_sigma*1.25,
                                               lambda = rep(30, length(sel))*1.1),
                                  plot.fit = T))
    
    (bfgs2_full_xic <- fitemgs_bfgs_2(signal = x@xic[sel_bound_full[1]:sel_bound_full[2]], 
                                     scantime = sel_bound_full[1]:sel_bound_full[2], 
                                     seed = list(mu = x@rawProcResults$adj_apex[sel],
                                                 sigma = sel_sigma,
                                                 lambda = rep(10, length(sel))),
                                     plot.fit = T))
    (bfgs2_vip_xic <- fitemgs_bfgs_2(signal = x@xic[sel_bound_vip[1]:sel_bound_vip[2]], 
                                    scantime = sel_bound_vip[1]:sel_bound_vip[2], 
                                    seed = list(mu = x@rawProcResults$adj_apex[sel],
                                                sigma = sel_sigma,
                                                lambda = rep(10, length(sel))),
                                    plot.fit = T))
    (bfgs2_sel1_xic <- fitemgs_bfgs_2(signal = x@xic[sel1_idx], 
                                    scantime = sel1_idx, 
                                    seed = list(mu = x@rawProcResults$adj_apex[sel],
                                                sigma = sel_sigma,
                                                lambda = rep(10, length(sel))),
                                    plot.fit = T))
    
    (bfgs_full_d0 <- fitemgs_bfgs(signal = x@d0[sel_bound_full[1]:sel_bound_full[2]], 
                                   scantime = sel_bound_full[1]:sel_bound_full[2], 
                                   seed = list(mu = x@rawProcResults$adj_apex[sel],
                                               sigma = sel_sigma,
                                               lambda = rep(10, length(sel))),
                                   upper = list(mu = x@rawProcResults$adj_apex[sel]-5,
                                                sigma = sel_sigma*.75,
                                                lambda = rep(1, length(sel))*.9),
                                   lower = list(mu = x@rawProcResults$adj_apex[sel]+5,
                                                sigma = sel_sigma*1.25,
                                                lambda = rep(30, length(sel))*1.1),
                                   plot.fit = T))
    (bfgs_vip_d0 <- fitemgs_bfgs(signal = x@d0[sel_bound_vip[1]:sel_bound_vip[2]], 
                                  scantime = sel_bound_vip[1]:sel_bound_vip[2], 
                                  seed = list(mu = x@rawProcResults$adj_apex[sel],
                                              sigma = sel_sigma,
                                              lambda = rep(10, length(sel))),
                                  upper = list(mu = x@rawProcResults$adj_apex[sel]-5,
                                               sigma = sel_sigma*.75,
                                               lambda = rep(1, length(sel))*.9),
                                  lower = list(mu = x@rawProcResults$adj_apex[sel]+5,
                                               sigma = sel_sigma*1.25,
                                               lambda = rep(30, length(sel))*1.1),
                                  plot.fit = T))
    (bfgs_sel1_d0 <- fitemgs_bfgs(signal = x@d0[sel1_idx], 
                                   scantime = sel1_idx, 
                                   seed = list(mu = x@rawProcResults$adj_apex[sel],
                                               sigma = sel_sigma,
                                               lambda = rep(10, length(sel))),
                                   upper = list(mu = x@rawProcResults$adj_apex[sel]-5,
                                                sigma = sel_sigma*.75,
                                                lambda = rep(1, length(sel))*.9),
                                   lower = list(mu = x@rawProcResults$adj_apex[sel]+5,
                                                sigma = sel_sigma*1.25,
                                                lambda = rep(30, length(sel))*1.1),
                                   plot.fit = T))
    
    (bfgs2_full_d0 <- fitemgs_bfgs_2(signal = x@d0[sel_bound_full[1]:sel_bound_full[2]], 
                                      scantime = sel_bound_full[1]:sel_bound_full[2], 
                                      seed = list(mu = x@rawProcResults$adj_apex[sel],
                                                  sigma = sel_sigma,
                                                  lambda = rep(10, length(sel))),
                                      plot.fit = T))
    (bfgs2_vip_d0 <- fitemgs_bfgs_2(signal = x@d0[sel_bound_vip[1]:sel_bound_vip[2]], 
                                     scantime = sel_bound_vip[1]:sel_bound_vip[2], 
                                     seed = list(mu = x@rawProcResults$adj_apex[sel],
                                                 sigma = sel_sigma,
                                                 lambda = rep(10, length(sel))),
                                     plot.fit = T))
    (bfgs2_sel1_d0 <- fitemgs_bfgs_2(signal = x@d0[sel1_idx], 
                                     scantime = sel1_idx, 
                                     seed = list(mu = x@rawProcResults$adj_apex[sel],
                                                 sigma = sel_sigma,
                                                 lambda = rep(10, length(sel))),
                                     plot.fit = T))
    
    fitemgs(signal = x@xic[sel_bound_full[1]:sel_bound_full[2]], 
            scantime = sel_bound_full[1]:sel_bound_full[2], 
            seed = list(mu = x@rawProcResults$adj_apex[sel]+1,
                        sigma = sel_sigma,
                        lambda = rep(10, length(sel))),
            upper = list(mu = x@rawProcResults$adj_apex[sel]+10,
                         sigma = sel_sigma*2,
                         lambda = rep(1, length(sel))),
            lower = list(mu = x@rawProcResults$adj_apex[sel]-10,
                         sigma = sel_sigma*0.25,
                         lambda = rep(100, length(sel))),
            plot.fit = T)
    
    fitemgs(signal = x@d0[sel_bound_full[1]:sel_bound_full[2]], 
            scantime = sel_bound_full[1]:sel_bound_full[2], 
            seed = list(mu = x@rawProcResults$adj_apex[sel]+1,
                        sigma = sel_sigma,
                        lambda = rep(10, length(sel))),
            upper = list(mu = c(70, 90, 110),
                         sigma = c(5, 7, 6),
                         lambda = rep(1, length(sel))),
            lower = list(mu = c(50, 70, 90),
                         sigma = c(1.5, 4, 3),
                         lambda = rep(100, length(sel))),
            plot.fit = T)
    
    
    
    # return result
    return(x)
})
}
