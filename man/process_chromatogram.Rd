% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\encoding{UTF-8}
\name{process_chromatogram}
\alias{process_chromatogram}
\title{Rcpp wrapper that calls the C++ chromatogram processing framework}
\usage{
process_chromatogram(
  d0,
  d1,
  d2,
  apex_thresh = 0,
  w = 5L,
  p = -1L,
  liftoff = 0,
  touchdown = 0.5,
  output = 0L
)
}
\arguments{
\item{d0}{Smoothed XIC trace}

\item{d1}{First derivative of smoothed XIC. Currently not used.}

\item{d2}{Second derivative of smoothed XIC}

\item{apex_thresh}{Second derivative threshold value.}

\item{w}{Apex detection window. Do not change unless you know what you are doing.}

\item{p}{Apex location of a specific peak. Leave blank if you wish to process the entire chromatogram.}

\item{liftoff}{Slope difference threshold (in percent) for the peak front.}

\item{touchdown}{Slope difference threshold (in percent) for the peak tail.}

\item{output}{\code{integer} value (0 = no output, 1 = verbose output).}
}
\value{
A list of peak characteristics.
}
\description{
The function takes smoothed d0, d1, and d2 vectors and processes the chromatogram by baseline expansion of peaks detected in the second derivative.

Do not use this function, this function is called via the R interface functions.
}
\examples{
require("signal")
x <- seq(1, 200, 1)
vec <- 1e5*dnorm(x, 100, 5) # create a vector with a gaussian peak
noise <- rnorm(length(x), 0, 5) # generate a noise vector
nvec <- vec + noise # create a noisy `chromatogram`.
smvec <- signal::sgolayfilt(nvec, n = 5) # smooth the vector using Savitzky-Golay
ddsmvec <- signal::sgolayfilt(nvec, n = 5, m = 2) # get the second derivative of the smoothed vector
cpc::process_chromatogram(d0 = smvec, d1 = 1.0, d2 = ddsmvec, apex_thresh = 10)
}
